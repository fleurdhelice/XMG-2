
%%


SynStmt : Node {$$=$1}
	| Dom  {$$=$1}
	| Prec {$$=$1}
/*	| Eq   {$$=$1} */
	| Tree {$$=$1};

Node : 'node' (Var)? MaybeProps Feats {$$=syn:node($2,$3,$4)};

MaybeProps : '(' Props ')' {get_coord($1,Coord), $$=some(avm:avm(Coord,$2))}
	   | 'props' Var {$$=$2}
	   | {$$=none};

Props : (Feat // ',')+ {$$=$1};

Feats : 'feats' Var {$$=$2} |
        (_AVM)? {$$=$1};

Feat : id '=' id {$$=avm:feat($1,$3)}
     | id '=' int {$$=avm:feat($1,$3)}
     | id '=' bool {$$=avm:feat($1,$3)}
     | id '=' '?' id {$$=avm:feat($1,$4)}
     | id {$$=avm:feat($1)};

Dom : IdOrNode DomOp IdOrNode {$$=syn:dom($2,$1,$3)}
    | IdOrNode '!' DomOp IdOrNode {$$=syn:notdom($3,$1,$4)};

IdOrNode : Node {$$=$1} 
	 | Var {$$=$1}
	 | Dot {$$=$1};
/* Dot should be borrowed from AVM brick (not only the constructors) */

Dot : Var '.' id {$$=avm:dot($1,$3)}
    | Var '.' '?' id {$$=avm:dot($1,$4)}
    | Var '.' Dot {$$=avm:dot($1,$3)}
    ; 

DomOp : '->' {$$=$1} 
      | '->+'{$$=$1} 
      | '->*'{$$=$1} 
      | '-L>'{$$=$1} 
      | '-R>'{$$=$1} ;

Prec : IdOrNode PrecOp IdOrNode {$$=syn:prec($2,$1,$3)}
     | IdOrNode '!' PrecOp IdOrNode {$$=syn:notprec($3,$1,$4)};

PrecOp : '>>' {$$=$1} 
       | '>>+'{$$=$1}  
       | '>>*'{$$=$1} ;

Tree : Node '{' Children '}' {$$=syn:tree($1,$3)};

Children : Child {$$=syn:children($1,none)} 
	 | Child TreePrecOp Children {$$=syn:children($1,brothers($2,$3))};

Child : TreeDomOp Node {$$=syn:child($1,$2)} 
      | TreeDomOp Tree {$$=syn:child($1,$2)};

TreePrecOp : ',,,' {$$=$1}
	   | ',,,+'{$$=$1} 
	   | {$$=none};

TreeDomOp : '...' {$$=$1}
	  | '...+'{$$=$1}
	  | {$$=none};

/* Eq : Expr '=' Expr {$$=syn:eq($1,$3)}; */

/* Expr : id {$$=$1}  */
/*     | string {$$=$1}; */

Var : id {$$=$1} 
    | '?' id {$$=$2};

%%
